using System;
using System.Collections.Generic;
using System.Linq;
using System.Security;
using System.Web;
using System.Web.Configuration;
using System.Web.Services;

using OfficeDevPnP.Core;
using Microsoft.SharePoint.Client;

namespace JDP.Proxy.InfoPath
{
    /// <summary>
    /// Summary description for InfoPath
    /// </summary>
    [WebService(Namespace = "http://microsoft.mso.jdp.org/samples")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    // [System.Web.Script.Services.ScriptService]
    public class InfoPath : System.Web.Services.WebService
    {

        private static readonly string AccountPrefix = "i:0#.f|membership|";
        private static readonly string ClientValidationKey = "ourSharedSecret";
        private static readonly string ClientValidationError = "Validation failed. You do not have permission to perform this action or access this resource";

        [WebMethod]
        public string HelloWorld()
        {
            return "Hello World";
        }

        [WebMethod]
        public string ServiceAccountTest()
        {
            return GetGroupCollectionsOfUserViaServiceAccount("https://tielke.sharepoint.com/sites/wcm", "maxt@tielke.onMicrosoft.com", ClientValidationKey);
        }
        [WebMethod]
        public string AppRegistrationTest()
        {
            return GetGroupCollectionsOfUserViaAppRegistration("https://tielke.sharepoint.com/sites/wcm", "maxt@tielke.onMicrosoft.com", ClientValidationKey);
        }

        [WebMethod]
        public string GetGroupCollectionsOfUserViaServiceAccount(string siteCollectionURL, string username, string clientValidator)
        {
            //siteCollectionURL = "https://contoso.sharepoint.com/sites/test";
            //userName = "user@contoso.onMicrosoft.com";

            try
            {
                ValidateClient(clientValidator);

                // Grab the Service Account Details. Read from Web.config
                string serviceAccount = WebConfigurationManager.AppSettings["ServiceAccountUsername"];
                string servicePassword = WebConfigurationManager.AppSettings["ServiceAccountPassword"];

                SecureString securePassword = new SecureString();
                foreach (char c in servicePassword)
                {
                    securePassword.AppendChar(c);
                }

                using (var clientContext = CreateAuthenticatedUserContext(siteCollectionURL, serviceAccount, securePassword))
                {
                    return GetGroupCollectionsOfUser(clientContext, username);
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }
        
        [WebMethod]
        public string GetGroupCollectionsOfUserViaAppRegistration(string siteCollectionURL, string username, string clientValidator)
        {
            //siteCollectionURL = "https://contoso.sharepoint.com/sites/test";
            //userName = "user@contoso.onMicrosoft.com";

            try
            {
                ValidateClient(clientValidator);

                using (var clientContext = CreateAppOnlyClientContext(siteCollectionURL))
                {
                    return GetGroupCollectionsOfUser(clientContext, username);
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }


        private static void ValidateClient(string clientValidator)
        {
            // currently, all forms share the same client validation key.

            // this method could be enhanced/improved to implement site-specific validation keys.
            // - register the site and its key in a central registration list
            // - form passes its the site url and validation key
            // - this method queries the registration list and validates the siteUrl/Key pair.

            if (clientValidator.Equals(ClientValidationKey, StringComparison.InvariantCulture) == false)
            {
                throw new ApplicationException(ClientValidationError);
            }
        }

        private static string GetGroupCollectionsOfUser(ClientContext clientContext, string username)
        {
            //encodedLoginName = "i:0#.f|membership|user@contoso.onMicrosoft.com";
            string encodedLoginName = AccountPrefix + username;
            var output = String.Empty;

            var user = clientContext.Web.SiteUsers.GetByLoginName(encodedLoginName);
            clientContext.Load(user, l => l.Groups, l => l.Id, l => l.LoginName);
            clientContext.ExecuteQuery();

            foreach (var group in user.Groups)
            {
                output += group.Title + ",";
            }

            if (!string.IsNullOrEmpty(output))
            {
                output = output.Substring(0, output.Length - 1);
            }

            return output;
        }
        
        private static ClientContext CreateAuthenticatedUserContext(string siteUrl, string username, SecureString password)
        {
            ClientContext userContext = new ClientContext(siteUrl);
            // use o365 authentication (SPO-MT or vNext)
            userContext.Credentials = new SharePointOnlineCredentials(username, password);
            return userContext;
        }

        private static ClientContext CreateAppOnlyClientContext(string siteUrl)
        {
            var parentSiteUri = new Uri(siteUrl);
            string realm = TokenHelper.GetRealmFromTargetUrl(parentSiteUri);
            var token = TokenHelper.GetAppOnlyAccessToken(TokenHelper.SharePointPrincipal, parentSiteUri.Authority, realm).AccessToken;
            var clientContext = TokenHelper.GetClientContextWithAccessToken(parentSiteUri.ToString(), token);

            return clientContext;
        }
    }
}